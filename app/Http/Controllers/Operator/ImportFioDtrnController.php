<?php

namespace App\Http\Controllers\Operator;

use Illuminate\Http\Request;
use App\Models\FioDtrn;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\ValidationException;
use Carbon\Carbon;
use Illuminate\Support\Facades\Log; // –≤–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

class ImportFioDtrnController extends BaseController
{
 // –§–æ—Ä–º–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    public function showClientsImportForm()
    {
//        dd("–§–æ—Ä–º–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞!");
        return view('fiodtrns.import');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    public function importClients(Request $request)
    {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
        $request->validate([
            'csv_file' => 'required|mimes:csv,txt',
        ]);
        $path = $request->file('csv_file')->getRealPath();
        Log::info("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω", ['path' => $path]); // üìå –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
//        dd( $path);        
        
        $rows = [];
        $handle = fopen($path, 'r');

        if ($handle === false) {
            return back()->with('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª');
        }
        while (($row = fgetcsv($handle, 0, ';')) !== false) {
            $rows[] = $row;
        }
        fclose($handle);
        $header = array_shift($rows); // –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

        $allowedHeaders = ['kl_id', 'fio', 'data_r', 'sex', 'rip_at', 'created_rip', 'komment'];

        if ($header !== $allowedHeaders && $header !== [implode(';', $allowedHeaders)]) {
            Log::error("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ CSV", ['expected' => $allowedHeaders, 'got' => $header]);
            return back()->with('import_errors', ['–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CSV. –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å: ' . implode(';', $allowedHeaders)]);
        }
        // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏—à—ë–ª –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ ‚Äî —Ä–∞–∑–±–µ–π –µ—ë
        if (is_array($header) && count($header) === 1) {
            $header = explode(';', $header[0]);
        } elseif (!is_array($header)) {
            $header = explode(';', (string)$header);
        }
        
        // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º
        if ($header !== $allowedHeaders) {
            Log::error("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ CSV", ['expected' => $allowedHeaders, 'got' => $header]);
            return back()->with('import_errors', ['–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ CSV. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å: ' . implode(';', $allowedHeaders)]);
        }

        $errors = [];
        $successCount = 0;

        foreach ($rows as $index => $row) {
            if (count($row) < count($allowedHeaders)) {
                $errorMsg = "–°—Ç—Ä–æ–∫–∞ " . ($index + 2) . ": –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö";
                Log::warning($errorMsg);
                $errors[] = $errorMsg;
                continue;
            }

            $data = array_combine($allowedHeaders, $row);

            try {
                Validator::make($data, [
                    'kl_id' => 'required|string|max:255',
                    'fio' => 'required|string|max:255',
                    'data_r' => 'nullable|date_format:d.m.Y',
                    'sex' => 'nullable|in:–ú,–ñ',
                    'rip_at' => 'nullable|date_format:d.m.Y',
                    'created_rip' => 'nullable|date_format:d.m.Y H:i',
                    'komment' => 'nullable|string',
                ])->validate();

                // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
                $data['data_r'] = $data['data_r'] ? Carbon::createFromFormat('d.m.Y', $data['data_r'])->toDateString() : null;
                $data['rip_at'] = $data['rip_at'] ? Carbon::createFromFormat('d.m.Y', $data['rip_at'])->toDateString() : null;
                $data['created_rip'] = $data['created_rip'] ? Carbon::createFromFormat('d.m.Y H:i', $data['created_rip'])->toDateTimeString() : null;

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞
                if (FioDtrn::where('kl_id', $data['kl_id'])->exists()) {
                     $errorMsg = "–°—Ç—Ä–æ–∫–∞ " . ($index + 2) . ": –∫–ª–∏–µ–Ω—Ç —Å ID {$data['kl_id']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.";
                    Log::info($errorMsg);
                    $errors[] = $errorMsg;
                    continue;
                }

                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
                FioDtrn::create(array_merge($data, [
                    'user_id' => auth()->id(),
                ]));

                $successCount++;
                Log::info("–ö–ª–∏–µ–Ω—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω", ['kl_id' => $data['kl_id'], 'fio' => $data['fio']]);
            } catch (ValidationException $e) { // –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                $errorMsg = "–°—Ç—Ä–æ–∫–∞ " . ($index + 2) . ": " . collect($e->validator->errors()->all())->join(', ');
                Log::warning($errorMsg);
                $errors[] = $errorMsg;
            } catch (\Throwable $e) {
                $errorMsg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ " . ($index + 2) . ": " . $e->getMessage();
                Log::error($errorMsg);
                $errors[] = $errorMsg;
            }
        }
        if (!empty($errors)) {

            return back()
                ->with('import_errors', $errors)
                ->with('success_count', $successCount);
        }
        Log::info("–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ", ['success_count' => $successCount]);
        return redirect()->route('fiodtrns.index')
            ->with('success', "–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {$successCount} –∫–ª–∏–µ–Ω—Ç(–æ–≤)");
    }
}
